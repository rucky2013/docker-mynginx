daemon off;
user root;
#user  nobody;

#error_log 级别分为 debug, info, notice, warn, error, crit  默认为crit, 该级别在日志名后边定义格式如下：
#error_log  /your/path/error.log crit;
#crit 记录的日志最少，而debug记录的日志最多。

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log  logs/error.log  debug;

#pid        logs/nginx.pid;

worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

events {
  worker_connections 65535;
#  reuse_port on;
}


# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip on;
    gzip_min_length  4k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_proxied        any;  #前端是squid的情况下要加此参数，否则squid上不缓存gzip文件
    gzip_comp_level 9;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    #全局配置内定义缓存
#   proxy_buffering    off;    <- don't forget to comment out or remove this line.
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Scheme $scheme;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   Host $http_host;

    proxy_cache_path   /var/lib/nginx/cache levels=1:2 keys_zone=one:1000m;
    proxy_cache_methods GET HEAD;
    proxy_cache_key $host$uri$is_args$args;
    proxy_cache_valid 200 10m;

# This is important if you use Play chunked response as chunked response is only available with HTTP 1.1
    proxy_http_version 1.1;


    upstream backendjava  {
      server   mytomcat1:8080 weight=10;
      server   mytomcat2:8080 weight=10;
      session_sticky;
    }


    map $http_host $item_dynamic {
        hostnames;

        default       0;

        example.com   1;
        *.example.com 1;
        example.org   2;
        *.example.org 2;
        .example.net  3;
        wap.*         4;
    }

    map $http_user_agent $mobile {
        default       0;
        "~Opera Mini" 1;
    }


    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path '/usr/local/nginx/conf/nginx.d/lua/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/luajit-2.0.3/jit/?.lua;/usr/local/openresty/lualib/?.lua;';
    # set search paths for Lua external libraries written in C (can also use ';;'):
    lua_package_cpath '/usr/local/lib/lua/5.1/?.so;/usr/local/openresty/lualib/?.so;';


    #lua 进行初始化参数
    #生产环境下千万别关闭Lua代码缓存，只能用在开发模式下，因为对性能有十分大的影响（
    #每次IO读取和编译Lua代码消耗很大， 简单的hello world都会慢一个数量级）。
    #默认开启  生产环境todo
    lua_code_cache off;

    lua_shared_dict myconfig 1m;
    #此指令中加载的全局变量会进行Copy-OnWrite，即会复制到所有全局变量到Worker进程。
    init_by_lua '
        cjson = require "cjson";
        local myconfig = ngx.shared.myconfig;
        myconfig:set("Tom", 56)

        myconfig:set("redis-host", "192.168.59.103")
        myconfig:set("redis-port", "6379")

        myconfig:set("mysql-host", "192.168.59.103")
        myconfig:set("mysql-port", "3306")

        --加载配置文件
        local file = io.open("/usr/local/nginx/conf/nginx.d/lua/config.json", "r");
        local content = cjson.decode(file:read("*all"));
        file:close();

        for name, value in pairs(content) do
            myconfig:set(name,value);

            --myconfig:set(name.."-host", value.host);
            --myconfig:set(name.."-port", value.port);
        end

    ';

    #用于启动一些定时任务，比如心跳检查，定时拉取服务器配置
    init_worker_by_lua_file /usr/local/nginx/conf/nginx.d/lua/init_worker.lua;


  server {
        listen     80 backlog=65535;
        server_name  localhost;

	    root /data/www;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #proxy_redirect              off;
        #proxy_set_header Host $host;
        #proxy_set_header X-Real-IP $remote_addr;
        #proxy_set_header REMOTE-HOST $remote_addr;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;



        #慢速响应记录日志
        #log_by_lua '
        #    if tonumber(ngx.var.upstream_response_time) >= 1 then
        #          ngx.log(ngx.WARN, "[SLOW] Ngx upstream response time: " .. ngx.var.upstream_response_time .. "s from " .. ngx.var.upstream_addr);
        #    end
        #';


        location / {

            root   /data/www;
            index  index.html index.htm;
        }

        location = /api {
            default_type 'text/plain';

            #access_by_lua_file  '/usr/local/nginx/conf/nginx.d/lua/token.lua';
            access_by_lua_file   '/usr/local/nginx/conf/nginx.d/lua/channel-auth.lua';


            content_by_lua '

                local myconfig = ngx.shared.myconfig;
                ngx.say(myconfig:get("Tom"))

                ngx.say(myconfig:get("redis-host"))
                ngx.say(myconfig:get("mysql-host"))

                ngx.say(cjson.encode({dog = 5, cat = 6}))
            ';
        }

        location = /apitest {
            default_type 'text/plain';

            content_by_lua '
                local myconfig = ngx.shared.myconfig;
                ngx.say(myconfig:get("Tom"))

                ngx.say(myconfig:get("redis-host"))
                ngx.say(myconfig:get("redis-port"))

                ngx.say(myconfig:get("host"))
                ngx.say(myconfig:get("port"))

                ngx.say(cjson.encode({dog = 5, cat = 6}))
            ';
        }





        location /java {
          proxy_pass http://backendjava/;
          root   /data/www;
          index  index.html index.htm index.jsp;

        }

        #webjars 缓存配置
        add_header X-Proxy-Cache $upstream_cache_status;

        location ~ ^/(assets|webjars)/ {
            proxy_cache one;

            proxy_cache_bypass  $http_cache_control;

            proxy_cache_key "$host$request_uri";
            proxy_cache_valid 200 30d;
            proxy_cache_valid 301 302 10m;
            proxy_cache_valid 404 1m;

            proxy_pass http://backendjava;
        }

#       location ~ .(jpg|png|gif|css|js)$ {
#            proxy_pass http://127.0.0.1:81;#
#
#            #设置资源缓存的zone
#            proxy_cache cache1;
#
#            #设置缓存的key
#            proxy_cache_key $host$uri$is_args$args;
#
#            #设置状态码为200和304的响应可以进行缓存，并且缓存时间为10分钟
#            proxy_cache_valid 200 304 10m;
#
#            expires 30d;
#        }


        #清除缓存配置
        #wget http://example.com/purge/uri
        #其中uri为静态资源的URI，如果缓存的资源的URL为 http://example.com/js/jquery.js，那么访问 http://example.com/purge/js/jquery.js则会清除缓存。
        location ~ /purge(/.*) {
            #允许的IP
            allow 127.0.0.1;
            deny all;
            proxy_cache_purge one $host$1$is_args$args;
        }



        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

        location /images/ {
                      set $image_root /data/www;
                      set $file $image_root$uri;
                      set $forward_url "";
                      if (!-e $file) {
                      rewrite_by_lua '
                              local originalUri = nil;
                              local area = nil;
                              local index = string.find(ngx.var.uri, "([0-9]+)x([0-9]+)");
                              local oUIndex = nil;
                              local fileExtName = nil;
                              local fileSuffix = nil;
                              if  index ~= nil then
                                      originalUri = string.sub(ngx.var.uri, 0, index-2);
                                      oUIndex = string.find(originalUri,"([.])");
                                      fileExtName = string.sub(originalUri,oUIndex+1);
                                      fileSuffix = string.sub(originalUri,0,oUIndex-1);
                                      area = string.sub(ngx.var.uri, index);
                                      index = string.find(area, "([.])");
                                      if  index ~= nil then
                                              area = string.sub(area, 0, index-1);
                                      end;
                                end;
                              if originalUri ~= nil then
                                      local command = "gm convert " .. ngx.var.image_root..originalUri  .. " -thumbnail " .. area.."^" .. " -background gray -gravity center -extent " .. area .." ".. ngx.var.image_root..originalUri .."_" .. area .. "."..fileExtName;
                                      os.execute("echo command "..command .."  >>/usr/local/nginx/logs/gm.txt");
              os.execute(command);
                                      ngx.var.forward_url = fileSuffix.."_thumb."..fileExtName;
                              else
                                      ngx.var.forward_url = ngx.var.uri;
                              end;
                         ';
                       }
              }



    include   /usr/local/nginx/conf/nginx.d/lua.conf;
    include   /usr/local/nginx/conf/nginx.d/redis.conf;
    include   /usr/local/nginx/conf/nginx.d/lua-redis.conf;
    include   /usr/local/nginx/conf/nginx.d/lua-mysql.conf;
    include   /usr/local/nginx/conf/nginx.d/echo.conf;
    include   /usr/local/nginx/conf/nginx.d/channel.conf;


    }



    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
